// Generated by CoffeeScript 1.12.7
(function() {
  
window.AudioContext = window.AudioContext ||
	window.webkitAudioContext ||
	window.mozAudioContext ||
	window.msAudioContext;

navigator.getUserMedia = navigator.getUserMedia ||
	navigator.webkitGetUserMedia ||
	navigator.mozGetUserMedia ||
	navigator.msGetUserMedia;
;
  var BUFFER_SIZE, FFT_OUTPUT_SIZE, audioContext, calculateFrequency, catchFourierResults, mediaRequirements, nodes, printError, startMicrophone;

  BUFFER_SIZE = 1024;

  FFT_OUTPUT_SIZE = 32768;

  audioContext = new AudioContext();

  nodes = {
    micSource: null,
    fourier: null,
    catcher: null
  };

  catchFourierResults = function() {
    var array, frequency, i, j, len, max, maxIndex, nonZeroCount;
    array = new Uint8Array(nodes.fourier.frequencyBinCount);
    nodes.fourier.getByteFrequencyData(array);
    nonZeroCount = 0;
    for (j = 0, len = array.length; j < len; j++) {
      i = array[j];
      if (!i === 0) {
        nonZeroCount += 1;
      }
    }
    max = Math.max.apply(Math, array);
    maxIndex = array.indexOf(max);
    frequency = calculateFrequency(maxIndex);
    $("#meta-detected-frequency").val(frequency);
    $("#meta-detected-frequency").change();
    return null;
  };

  calculateFrequency = function(fftBucketIndex) {
    var bucketStep, estFreq, nyquistFreq;
    nyquistFreq = audioContext.sampleRate;
    bucketStep = nyquistFreq / FFT_OUTPUT_SIZE;
    estFreq = bucketStep * (fftBucketIndex + 0.5);
    console.log(estFreq);
    return estFreq;
  };

  startMicrophone = function(stream) {
    nodes.micSource = audioContext.createMediaStreamSource(stream);
    nodes.fourier = audioContext.createAnalyser();
    nodes.fourier.smoothingTimeConstant = 0;
    nodes.fourier.fftSize = FFT_OUTPUT_SIZE;
    nodes.catcher = audioContext.createScriptProcessor(BUFFER_SIZE, 1, 1);
    nodes.catcher.onaudioprocess = catchFourierResults;
    nodes.micSource.connect(nodes.fourier);
    nodes.fourier.connect(nodes.catcher);
    nodes.catcher.connect(audioContext.destination);
    return null;
  };

  printError = function(msg) {
    return console.log("Error while starting audio: \n" + msg);
  };

  mediaRequirements = {
    audio: true
  };

  navigator.getUserMedia(mediaRequirements, startMicrophone, printError);

}).call(this);
